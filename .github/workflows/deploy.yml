name: Deploy Afilmory to Server

on:
  push:
    branches: ['self-deployment']

  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: 'pages'
  cancel-in-progress: false

env:
  BUILD_PATH: '.' # default value when not using subfolders

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://gallery.mxte.cc
    steps:
      - name: Checkout # Checkout the repository
        uses: actions/checkout@v4

      - name: Set up pnpm # Setup pnpm package manager
        uses: pnpm/action-setup@v4

      - name: Set up Node.js # Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Specify your desired Node.js version
          cache: 'pnpm' # Cache pnpm dependencies
      
      - name: Cache pnpm modules
        uses: actions/cache@v4
        env:
          cache-name: cache-pnpm-modules
        with:
          path: |
            ~/.pnpm-store
            **/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies # Install project dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache build artifacts # Cache Next.js build artifacts
        uses: actions/cache@v4
        with:
          path: |
            apps/ssr/.next/cache
            apps/ssr/.next/standalone
            apps/ssr/.next/static
          key: ${{ runner.os }}-build-${{ hashFiles('apps/ssr/**/*.js', 'apps/ssr/**/*.ts', 'apps/ssr/**/*.tsx', 'apps/ssr/**/*.json') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Create .env file # Create .env file from secrets for the Docker build
        run: |
          touch .env
          echo S3_ACCESS_KEY_ID=${{ secrets.S3_ACCESS_KEY_ID }} >> .env
          echo S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }} >> .env
          echo PG_CONNECTION_STRING=${{ secrets.PG_CONNECTION_STRING }} >> .env

      - name: Build manifest # Build the project manifest
        run: |
          pnpm build:manifest

      - name: Build project # Build the project in GitHub Actions
        run: |
          pnpm build

      - name: Set up Docker Buildx # Setup Docker Buildx for multi-platform builds
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers # Cache Docker layers to speed up subsequent builds
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image # Build the Docker image with pre-built artifacts
        run: |
          docker buildx build --platform linux/amd64 -f Dockerfile.deploy -t max/afilmory-gallery --output type=docker,dest=afilmory-gallery.tar .

      - name: Extract image # Extract the built Docker image tarball
        run: |
          [ -d afilmory-gallery ] || mkdir afilmory-gallery
          tar -xf afilmory-gallery.tar -C afilmory-gallery

      - name: Upload artifact for deployment job # Upload the Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: afilmory-gallery
          path: ./afilmory-gallery

  Deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: production
      url: https://gallery.mxte.cc
    steps:
      - name: Download artifact from build job # Download the Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: afilmory-gallery
          path: ./afilmory-gallery

      - name: Copy Docker image to server # Deploy the Docker image to the server via SSH
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_KEY }}
          REMOTE_PORT: ${{ secrets.SERVER_PORT }}
          ARGS: '-ravc -i --delete'
          SOURCE: './afilmory-gallery/'
          REMOTE_HOST: ${{ secrets.SERVER_ADDRESS }}
          REMOTE_USER: ${{ secrets.SERVER_USERNAME }}
          TARGET: /tmp/afilmory-gallery
          SCRIPT_BEFORE: |
            [ -d /tmp/afilmory-gallery ] || mkdir /tmp/afilmory-gallery
          SCRIPT_AFTER: |
            cd /tmp/afilmory-gallery
            tar -cf afilmory-gallery.tar *
            # Script to update the Docker container on the server
            # Stop and remove existing container if it exists
            if [ "$(docker ps -aq -f name=afilmory-gallery)" ]; then
              docker stop afilmory-gallery
              docker rm afilmory-gallery
            fi
            # Remove existing image if it exists
            if [ "$(docker images -q max/afilmory-gallery)" ]; then
              docker rmi max/afilmory-gallery
            fi
            docker load -i afilmory-gallery.tar
            docker run --restart always -d --name afilmory-gallery -p 8081:3000 max/afilmory-gallery
